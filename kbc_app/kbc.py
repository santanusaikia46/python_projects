# -*- coding: utf-8 -*-
"""KBC.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1OHkPzZ_8oRjhnBs32G2p0foiIwSnM7Te
"""

import random
question_bank = [
    [
        {
            "question": "Which type of Programming does Python support?",
            "options": ["object-oriented programming", "structured programming", "functional programming", "All of the mentioned"],
            "correct_answer": "All of the mentioned",
        },
        {
            "question": " Which of the following is used to define a block of code in Python language",
            "options": ["Indentation", "Key", "Brackets", "All of the mentioned"],
            "correct_answer": "Indentation",
        },
        {
            "question": "What does the expression `'Python' * 3` evaluate to?",
            "options": ["PythonPythonPython", "Python3", "Python,Python,Python", "TypeError"],
            "correct_answer": "PythonPythonPython",
        },
        {
            "question": "Which of the following is the correct extension of the Python file?",
            "options": [".python", ".py", ".pl", ".p"],
            "correct_answer": ".py",
        },
        {
            "question": "Which keyword is used for function in Python language?",
            "options": ["def", "Function", "Fun", "Define"],
            "correct_answer": "def",
        }
     ],
    [
        {
            "question": "Who developed Python Programming Language?",
            "options": ["Wick van Rossum", "Rasmus Lerdorf", "Guido van Rossum", "Niene Stom"],
            "correct_answer": "Guido van Rossum",
        },
        {
            "question": "Which of the following is a Python tuple?",
            "options": ["{1, 2, 3}", "{}", "[1, 2, 3]", "(1, 2, 3)"],
            "correct_answer": "(1, 2, 3)",
        },
        {
            "question": "Which of the following functions is a built-in function in python?",
            "options": ["sqrt()", "seed()", "range()", "pow()"],
            "correct_answer": "range()",
        },
        {
            "question": "What does pip stand for python?",
            "options": ["Pip Installs Python", "Pip Installs Packages", "Preferred Installer Program", "All of the mentioned"],
            "correct_answer": "7",
        },
        {
            "question": "Which of the following is the truncation division operator in Python?",
            "options": ["|", "//", "/", "%"],
            "correct_answer": "//",
        }
    ],
    [
        {
            "question": "Is Python code compiled or interpreted?",
            "options": ["Python code is both compiled and interpreted", "Python code is neither compiled nor interpreted", "Python code is only compiled", "Python code is only interpreted"],
            "correct_answer": "Python code is both compiled and interpreted",
        },
        {
            "question": "Which of the following statements is used to create an empty set in Python?",
            "options": ["[]", "{}", "()", "set()"],
            "correct_answer": "set()",
        },
        {
            "question": "The filament of an electric bulb is made of?",
            "options": ["tungsten", "nichrome", "graphite", "iron"],
            "correct_answer": "tungsten",
        },
        {
            "question": "Which of the following concepts is not a part of Python?",
            "options": ["Pointers", "Loops", "Dynamic Typing", "All of the above"],
            "correct_answer": "Pointers",
        }

    ]
]

level_winnings = [1000,2000,3000,4000,5000,10000,20000,40000,80000,160000,320000,640000,1250000,2500000,5000000,1000000]

life_lines = ["50:50", "double dip"]

def display_question(question_data, level):
    print(f"Next question for {level_winnings[level]} rupees:")
    print(question_data["question"])
    for i, option in enumerate(question_data["options"]):
        print(f"{i + 1}. {option}")

def display_lifeline():
    print("Available lifelines:")
    for index, life_line in enumerate(life_lines):
        print(f"{index + 1}. {life_line}")

def display_question_50(question_data):
    options_to_display = question_data["options"].copy()
    options_to_display.remove(question_data["correct_answer"])
    random.shuffle(options_to_display)
    options_to_display = options_to_display[:1]
    options_to_display.append(question_data["correct_answer"])
    random.shuffle(options_to_display)

    for i, option in enumerate(options_to_display):
        print(f"{i + 1}. {option}")

def double_dip(question_data):
    choice = int(input("Enter Your First choice: "))
    if question_data["options"][choice - 1] == question_data["correct_answer"]:
        return True
    else:
        choice = int(input("Enter Your Second choice: "))
        if question_data["options"][choice - 1] == question_data["correct_answer"]:
            return True
        else:
            return False

def game():
    print("Welcome to Kaun Banega Crorepati!")
    total_winnings = 0
    level = 0
    game_running = True
    used_lifelines = []

    for question_set in question_bank:
        if not game_running:
            break
        random.shuffle(question_set)

        for question_data in question_set:
            if not game_running:
                break

            display_question(question_data, level)
            display_lifeline()

            use_lifeline = input("Do you want to use a lifeline? (yes/no): ").lower()
            if use_lifeline in ("yes", "y"):
                display_lifeline()
                lifeline_choice = int(input("Choose a lifeline (1-2): "))
                if lifeline_choice == 1 and "50:50" in life_lines and "50:50" not in used_lifelines:
                    used_lifelines.append("50:50")
                    display_question_50(question_data)
                    selected_option = int(input("Enter your choice (1-2): "))
                elif lifeline_choice == 2 and "double dip" in life_lines and "double dip" not in used_lifelines:
                    used_lifelines.append("double dip")
                    if double_dip(question_data):
                        print("Congratulations! You can continue to the next question.")
                        break
                    else:
                        print("Sorry, you couldn't answer correctly on both attempts.")
                        game_running = False
                        break
                else:
                    print("Lifeline already used or invalid choice.")
            else:
                selected_option = int(input("Enter your choice (1-4) or type 'quit' to exit: "))

            if selected_option == 1 or selected_option == 2:
                selected_option = question_data["options"][selected_option - 1]

                if selected_option == question_data["correct_answer"]:
                    total_winnings = level_winnings[level]
                    print("Congratulations! You won", total_winnings, "rupees.\n")
                    level += 1
                    break
                else:
                    print("Sorry, that's incorrect. The correct answer was:", question_data["correct_answer"], "\n")
                    game_running = False
            elif selected_option == "quit":
                print("Thanks for playing!")
                game_running = False
            else:
                print("Invalid choice. Please enter a valid option.")

    if game_running:
        print("Congratulations! You've won a total of", total_winnings, "rupees.")
    else:
        print("You've won a total of", total_winnings, "rupees. Better luck next time!")

if __name__ == "__main__":
    game()